{"version":3,"file":"static/js/644.4fe5621f.chunk.js","mappings":"gPAEMA,EAAUC,EAAAA,EAAAA,GAAH,2CAIPC,GAAYD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,sH,SC2Bf,EA7B0B,SAAC,GAAgB,IAAdG,EAAa,EAAbA,OACrBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACN,EAAD,UACGI,EAAOG,KAAI,SAAAC,GAAU,IAAD,EACnB,OACE,yBACE,UAACN,EAAD,CAAWO,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAA7C,UACG,KACD,kCAAKG,EAAMK,aAAX,QAAoBL,EAAMM,WAHrBN,EAAME,GAOlB,KAGN,E,oCCnBKK,EAAiB,mCAAG,WAAMC,GAAN,gFAClBC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NANkB,kBAUCC,EAAAA,EAAAA,IAAA,0DAC8BN,EAD9B,8CAErBC,GAZoB,cAUhBM,EAVgB,yBAcfA,GAde,wHAAH,sDAoBvB,ICsDA,EAvEe,WAEb,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOR,EAAP,KAAcS,EAAd,KACA,GAAsCD,EAAAA,EAAAA,UAAS,MAA/C,eAAOE,EAAP,KAAoBC,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0CN,EAAAA,EAAAA,WAAS,GAAnD,eAAOO,EAAP,KAAsBC,EAAtB,KACA,GAAkDR,EAAAA,EAAAA,WAAS,GAA3D,eAAOS,EAAP,KAA0BC,EAA1B,KACA,GAA4CV,EAAAA,EAAAA,WAAS,GAArD,eAAOW,EAAP,KAAuBC,EAAvB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQT,EAAaU,IAAI,SAC/B,OAAc,OAAVD,GACFN,GAAiB,QACjBI,GAAkB,KAIpBrB,EAAkBuB,GAAOE,MAAK,SAAAjB,GACxBA,GAA6C,IAAjCA,EAASkB,KAAKC,QAAQC,QACpChB,EAAeJ,EAASkB,KAAKC,SAC7BV,GAAiB,GACjBI,GAAkB,IACwB,IAAjCb,EAASkB,KAAKC,QAAQC,OAC/BP,GAAkB,GACRb,GACVW,GAAqB,EAExB,IAEM,WACLF,GAAiB,GACjBI,GAAkB,GAClBF,GAAqB,EACtB,EACF,GAAE,CAACL,IAEJ,IAYMe,EAAoB,SAAA5B,GAExBc,EADgC,KAAVd,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEnD,EACD,OACE,iCACE,kBAAM6B,SAlBW,SAAAC,GACnBA,EAAEC,iBAEFH,EAAkB5B,EAAMgC,QACxBvB,EAAS,GACV,EAaG,WACE,4BACE,kBAAOwB,KAAK,OAAOX,MAAOtB,EAAOkC,SAbrB,SAAAJ,GAClB,IAAQR,EAAUQ,EAAEK,OAAZb,MACRb,EAASa,EACV,OAYK,mBAAQW,KAAK,SAAb,uBAEDlB,IAAiB,SAAC,EAAD,CAAmB3B,OAAQsB,IAC5CS,IACC,kEACuCN,EAAaU,IAAI,SADxD,OAIDN,IAAqB,oDAG3B,C","sources":["components/RenderSearchMovie/RenderSearchMovie.styled.js","components/RenderSearchMovie/RenderSearchMovie.js","api/fetchSearchMovies.js","pages/Movies.js"],"sourcesContent":["import styled from '@emotion/styled'\nimport { Link } from 'react-router-dom'\nconst Wrapper = styled.ul`\nlist-style: none;\n`\n\nconst LinkMovie = styled(Link)`\ntext-decoration: none;\ncolor: rgb(99, 18, 18);\n&:hover {\n    color: rgb(140, 81, 81);;\n}\n`\n\n\nexport {Wrapper, LinkMovie}","import { useLocation } from 'react-router-dom';\nimport { Wrapper, LinkMovie } from './RenderSearchMovie.styled';\nimport PropTypes from 'prop-types';\n\nconst RenderSearchMovie = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <Wrapper>\n      {movies.map(movie => {\n        return (\n          <li key={movie.id}>\n            <LinkMovie to={`${movie.id}`} state={{ from: location }}>\n              {' '}\n              <h3>{movie.title ?? movie.name}</h3>\n            </LinkMovie>\n          </li>\n        );\n      })}\n    </Wrapper>\n  );\n};\n\nRenderSearchMovie.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      name: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default RenderSearchMovie;\n","import axios from 'axios';\n\nconst fetchSearchMovies = async query => {\n  const options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1YWI4YTU2N2U4NTIwYjJkOTYxNmQyYjU1NGY1MGI4MyIsInN1YiI6IjY0Nzg5MDY0MDc2Y2U4MDEwNzliOGMxNCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.2ia6cdeIOjpNaTQl8aCiS1rstAtEfICJgybU1GCz5mQ',\n    },\n  };\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/search/movie?query=${query}&include_adult=false&language=en-US&page=1`,\n      options\n    );\n    return response;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport default fetchSearchMovies;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport RenderSearchMovie from '../components/RenderSearchMovie/RenderSearchMovie';\nimport fetchSearchMovies from 'api/fetchSearchMovies';\n\nconst Movies = () => {\n  \n  const [query, setQuery] = useState('');\n  const [foundMovies, setFoundMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [statusPending, setStatusPending] = useState(false);\n  const [statusErrorServer, setStatusErrorServer] = useState(false);\n  const [statusNotFaund, setStatusNotFound] = useState(false);\n\n  useEffect(() => {\n    const value = searchParams.get('query');\n    if (value === null) {\n      setStatusPending(false);\n      setStatusNotFound(false);\n      return;\n    }\n\n    fetchSearchMovies(value).then(response => {\n      if (response && response.data.results.length !== 0) {\n        setFoundMovies(response.data.results);\n        setStatusPending(true);\n        setStatusNotFound(false);\n      } else if (response.data.results.length === 0) {\n        setStatusNotFound(true);\n      } else if (!response) {\n        setStatusErrorServer(true);\n      }\n    });\n\n    return () => {\n      setStatusPending(false);\n      setStatusNotFound(false);\n      setStatusErrorServer(false);\n    };\n  }, [searchParams]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    updateQueryString(query.trim());\n    setQuery('');\n  };\n\n  const handleInput = e => {\n    const { value } = e.target;\n    setQuery(value);\n  };\n\n  const updateQueryString = query => {\n    const currentParams = query !== '' ? { query } : {};\n    setSearchParams(currentParams);\n  };\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input type=\"text\" value={query} onChange={handleInput}></input>\n        </label>\n        <button type=\"submit\">Search</button>\n      </form>\n      {statusPending && <RenderSearchMovie movies={foundMovies} />}\n      {statusNotFaund && (\n        <h2>\n          We don't have any movies by string \"{searchParams.get('query')}\"\n        </h2>\n      )}\n      {statusErrorServer && <h2>Server response error</h2>}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["Wrapper","styled","LinkMovie","Link","movies","location","useLocation","map","movie","to","id","state","from","title","name","fetchSearchMovies","query","options","method","headers","accept","Authorization","axios","response","useState","setQuery","foundMovies","setFoundMovies","useSearchParams","searchParams","setSearchParams","statusPending","setStatusPending","statusErrorServer","setStatusErrorServer","statusNotFaund","setStatusNotFound","useEffect","value","get","then","data","results","length","updateQueryString","onSubmit","e","preventDefault","trim","type","onChange","target"],"sourceRoot":""}