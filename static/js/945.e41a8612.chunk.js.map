{"version":3,"file":"static/js/945.e41a8612.chunk.js","mappings":"wPAEMA,EAAY,mCAAG,WAAOC,GAAP,gFACXC,EAAU,CACZC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cAAe,+NALJ,kBAQIC,EAAAA,EAAAA,IAAA,6CAAgDN,EAAhD,2BAA6EC,GARjF,cAQXM,EARW,yBASVA,GATU,wHAAH,sDAgBlB,I,SChBMC,E,OAAYC,EAAAA,GAAH,yG,SCsEX,EAlES,WAET,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0CF,EAAAA,EAAAA,WAAS,GAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KACOC,GAAWC,EAAAA,EAAAA,MAAXD,QACP,GAAsCL,EAAAA,EAAAA,WAAS,GAA/C,eAAOO,EAAP,KAAoBC,EAApB,KACA,GAAgCR,EAAAA,EAAAA,WAAS,GAAzC,eAAOS,EAAP,KAAiBC,EAAjB,MACJC,EAAAA,EAAAA,YAAU,WACVtB,EAAagB,GAASO,MAAK,SAAAf,GAcvB,OAbGA,GACCK,EAAQL,EAAOgB,KAAKZ,MACpBG,GAAiB,IACXP,IACNK,EAAQ,MACRE,GAAiB,GACjBI,GAAe,IAEQ,IAA5BX,EAAOgB,KAAKZ,KAAKa,SAChBZ,EAAQ,MACRE,GAAiB,GACjBM,GAAY,IAEL,WACHN,GAAiB,GACjBI,GAAe,GACfE,GAAY,EACf,CACJ,GACA,GAAC,CAACL,IAEH,IAAMU,EAAO,SAACC,GACV,IAAOC,EAAgBD,EAAhBC,aACX,OAAGA,EACG,uCAAN,OAA8CA,G,oyDAE7C,EACKC,EAAU,SAACF,GACb,IAAQG,EAAuBH,EAAvBG,cAAeC,EAAQJ,EAARI,KAC1B,OAAGA,IAEMD,GAEI,UACX,EAMC,OACA,+BACGhB,IAAiB,SAACL,EAAD,UACfG,EAAKoB,KAAI,SAAAL,GACZ,OAAM,2BACR,gBAAKM,IAAKP,EAAOC,GAAQO,IAAKL,EAAQF,GAAQQ,MAAO,GAAIC,OAAQ,OACjE,wBAAKP,EAAQF,MACb,wCAAc,2BAZIU,EAYgBV,EAAMU,UAXrCA,GAEW,uBAMGV,EAAMW,WATN,IAACD,CAcb,MAGJnB,IAAe,kDACfE,IAAY,wDAEZ,C","sources":["components/APi/fetchCredits.js","components/Cast/Cast.styled.js","components/Cast/Cast.js"],"sourcesContent":["import axios from 'axios';\n\nconst fetchCredits = async (id) => {\n    const options = {\n        method: 'GET',\n        headers: {\n          accept: 'application/json',\n          Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1YWI4YTU2N2U4NTIwYjJkOTYxNmQyYjU1NGY1MGI4MyIsInN1YiI6IjY0Nzg5MDY0MDc2Y2U4MDEwNzliOGMxNCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.2ia6cdeIOjpNaTQl8aCiS1rstAtEfICJgybU1GCz5mQ'\n        }};\ntry {\n    const result = await axios.get(`https://api.themoviedb.org/3/movie/${id}/credits?language=en-US`, options)\n    return result\n} catch (error) {\n    return error\n}\n        \n}\n\nexport default fetchCredits","import styled from '@emotion/styled'\n\nconst WrapperUl = styled.ul`\nlist-style: none;\npadding: 10px 0px 10px 0px;\nborder-bottom: 1px solid black;\n`\n\nexport {WrapperUl}","import { useState, useEffect } from \"react\"\nimport { useParams} from \"react-router-dom\"\nimport fetchCredits from \"../APi/fetchCredits\"\nimport defaultActor from \"./img/no-profile-picture-icon.png\"\nimport { WrapperUl } from \"./Cast.styled\"\n\nconst Cast = () => {\n\n    const [cast, setCast] = useState(null)\n    const [statusPending, setStatusPending] = useState(false)\n    const {movieId} = useParams()\n    const [errorServer, setErrorServer] = useState(false)\n    const [notFaund, setNotFound] = useState(false)\nuseEffect(()=> {\nfetchCredits(movieId).then(result => {\n    if(result){\n        setCast(result.data.cast)\n        setStatusPending(true)\n    }else if(!result){\n        setCast(null)\n        setStatusPending(false)\n        setErrorServer(true)\n    }\nif(result.data.cast.length === 0){\n    setCast(null)\n    setStatusPending(false)\n    setNotFound(true)\n}\n    return ()=> {\n        setStatusPending(false)\n        setErrorServer(false)  \n        setNotFound(false)\n    }\n})\n},[movieId])\n\nconst getImg=(actor)=>{\n    const {profile_path} = actor\nif(profile_path){\nreturn `https://image.tmdb.org/t/p/original/${profile_path}`\n}else{return defaultActor}\n}\nconst getName = (actor) => {\n    const { original_name, name} = actor\n if(name){\n    return name\n}else if (original_name){\n    return original_name \n}else{ return \"No name\"}\n  }\nconst getCharacter = (character)=> {\n    if(character){\n        return character\n    }else {return \"No character\"}\n}\n    return(\n    <section>\n      {statusPending && <WrapperUl>\n        {cast.map(actor => {\n      return<li key={actor.credit_id}>\n    <img src={getImg(actor)} alt={getName(actor)} width={80} height={120}></img>\n    <h3>{getName(actor)}</h3>\n    <p>Character: <span>{getCharacter(actor.character)}</span></p>\n    </li>\n        })\n        }\n    </WrapperUl>}\n    {errorServer && <h2>Server response error</h2>}\n    {notFaund && <h2>No cast information found</h2>}\n  </section>)\n    }\n    \n    export default Cast"],"names":["fetchCredits","id","options","method","headers","accept","Authorization","axios","result","WrapperUl","styled","useState","cast","setCast","statusPending","setStatusPending","movieId","useParams","errorServer","setErrorServer","notFaund","setNotFound","useEffect","then","data","length","getImg","actor","profile_path","getName","original_name","name","map","src","alt","width","height","character","credit_id"],"sourceRoot":""}