{"version":3,"file":"static/js/259.99140329.chunk.js","mappings":"gPAEMA,EAAUC,EAAAA,EAAAA,GAAH,2CAIPC,GAAYD,EAAAA,EAAAA,GAAOE,EAAAA,GAAPF,CAAH,sH,SCoBX,EAvBsB,SAAC,GAAc,IAAbG,EAAY,EAAZA,OACtBC,GAAWC,EAAAA,EAAAA,MACb,OACI,SAACN,EAAD,UACII,EAAOG,KAAI,SAAAC,GAAU,IAAD,EACpB,OAAM,yBAAmB,UAACN,EAAD,CAAWO,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAACC,KAAMP,GAA5C,eAAwD,kCAAKG,EAAMK,aAAX,QAAoBL,EAAMM,WAA5FN,EAAME,GACrB,KAIP,E,oCCXCK,EAAiB,mCAAG,WAAMC,GAAN,gFAChBC,EAAU,CACZC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cAAe,+NALC,kBASCC,EAAAA,EAAAA,IAAA,0DAA6DN,EAA7D,8CAAgHC,GATjH,cAShBM,EATgB,yBAUfA,GAVe,wHAAH,sDAgBvB,ICwDA,EAtEe,WACb,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOR,EAAP,KAAcS,EAAd,KACA,GAAsCD,EAAAA,EAAAA,UAAS,MAA/C,eAAOE,EAAP,KAAoBC,EAApB,KACA,GAA0CH,EAAAA,EAAAA,WAAS,GAAnD,eAAOI,EAAP,KAAsBC,EAAtB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAgCR,EAAAA,EAAAA,WAAS,GAAzC,eAAOS,EAAP,KAAiBC,EAAjB,KACA,GAAsCV,EAAAA,EAAAA,WAAS,GAA/C,eAAOW,EAAP,KAAoBC,EAApB,MAKAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQP,EAAaQ,IAAI,SAC/B,OAAc,OAAVD,GACAT,GAAiB,QACjBK,GAAY,KAIhBnB,EAAkBuB,GAAOE,MAAK,SAAAjB,GACxBA,GAA6C,IAAjCA,EAASkB,KAAKC,QAAQC,QACpChB,EAAeJ,EAASkB,KAAKC,SAC7Bb,GAAiB,GACjBK,GAAY,IAC4B,IAAjCX,EAASkB,KAAKC,QAAQC,OAC7BT,GAAY,GACJX,GACRa,GAAe,EAGlB,IAEM,WACHP,GAAiB,GACjBK,GAAY,GACZE,GAAe,EAClB,EACF,GAAE,CAACL,IAEJ,IAYMa,EAAoB,SAAC5B,GAEzBgB,EADgC,KAAVhB,EAAe,CAAEA,MAAAA,GAAU,CAAC,EAEnD,EACD,OACE,iCACE,kBAAM6B,SAlBW,SAAAC,GACnBA,EAAEC,iBAEFH,EAAkB5B,EAAMgC,QACxBvB,EAAS,GACV,EAaG,WACE,4BACE,kBAAOwB,KAAK,OAAOX,MAAOtB,EAAOkC,SAbrB,SAAAJ,GAClB,IAAQR,EAAUQ,EAAEK,OAAZb,MACRb,EAASa,EACV,OAYK,mBAAQW,KAAK,SAAb,uBAEDrB,IAAiB,SAAC,EAAD,CAAmBxB,OAAQsB,IAC5CO,IAAY,kEAAyCF,EAAaQ,IAAI,SAA1D,OACZJ,IAAe,oDAGrB,C","sources":["components/RenderSearchMovie/RenderSearchMovie.styled.js","components/RenderSearchMovie/RenderSearchMovie.js","components/APi/fetchSearchMovies.js","pages/Movies.js"],"sourcesContent":["import styled from '@emotion/styled'\nimport { Link } from 'react-router-dom'\nconst Wrapper = styled.ul`\nlist-style: none;\n`\n\nconst LinkMovie = styled(Link)`\ntext-decoration: none;\ncolor: rgb(99, 18, 18);\n&:hover {\n    color: rgb(140, 81, 81);;\n}\n`\n\n\nexport {Wrapper, LinkMovie}","import { useLocation } from \"react-router-dom\";\nimport { Wrapper, LinkMovie } from \"./RenderSearchMovie.styled\";\nimport PropTypes from 'prop-types';\nconst RenderSearchMovie = ({movies}) => {\nconst location = useLocation()\n    return(\n        <Wrapper>\n           {movies.map(movie => {\n            return<li key={movie.id}><LinkMovie to={`${movie.id}`} state={{from: location}}> <h3>{movie.title ?? movie.name}</h3></LinkMovie></li>\n           })}\n        </Wrapper>\n        \n    )\n    }\n    \n    RenderSearchMovie.propTypes = {\n        movies: PropTypes.arrayOf(\n          PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string,\n            name: PropTypes.string,\n          })\n        ).isRequired,\n      };\n\n\n    export default RenderSearchMovie","import axios from \"axios\"\n\nconst fetchSearchMovies = async(query)=> {\n    const options = {\n        method: 'GET',\n        headers: {\n          accept: 'application/json',\n          Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1YWI4YTU2N2U4NTIwYjJkOTYxNmQyYjU1NGY1MGI4MyIsInN1YiI6IjY0Nzg5MDY0MDc2Y2U4MDEwNzliOGMxNCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.2ia6cdeIOjpNaTQl8aCiS1rstAtEfICJgybU1GCz5mQ'\n        }\n      };\ntry {\n    const response = await axios.get(`https://api.themoviedb.org/3/search/movie?query=${query}&include_adult=false&language=en-US&page=1`, options)\n    return response\n} catch (error) {\nreturn error\n}\n}\n\nexport default fetchSearchMovies","import { useState, useEffect } from 'react';\nimport {useSearchParams} from \"react-router-dom\"\nimport RenderSearchMovie from '../components/RenderSearchMovie/RenderSearchMovie';\nimport fetchSearchMovies from 'components/APi/fetchSearchMovies';\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [foundMovies, setFoundMovies] = useState(null);\n  const [statusPending, setStatusPending] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [notFaund, setNotFound] = useState(false);\n  const [errorServer, setErrorServer] = useState(false);\n\n\n\n\n  useEffect(() => {\n    const value = searchParams.get(\"query\");\n    if (value === null) {\n        setStatusPending(false)\n        setNotFound(false)\n      return;\n    }\n\n    fetchSearchMovies(value).then(response => {\n      if (response && response.data.results.length !== 0) {\n        setFoundMovies(response.data.results);\n        setStatusPending(true);\n        setNotFound(false)\n      }else if(response.data.results.length === 0){\n        setNotFound(true)\n      }else if(!response){\n        setErrorServer(true)\n      }\n      \n    });\n\n    return ()=> {\n        setStatusPending(false)\n        setNotFound(false)\n        setErrorServer(false)\n    }\n  }, [searchParams]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    updateQueryString(query.trim())\n    setQuery('');\n  };\n\n  const handleInput = e => {\n    const { value } = e.target;\n    setQuery(value);\n  };\n\n  const updateQueryString = (query) => {\n    const currentParams = query !== \"\" ? { query } : {};\n    setSearchParams(currentParams);\n  };\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label>\n          <input type=\"text\" value={query} onChange={handleInput}></input>\n        </label>\n        <button type=\"submit\">Search</button>\n      </form>\n      {statusPending && <RenderSearchMovie movies={foundMovies} />}\n      {notFaund && <h2>We don't have any movies by string \"{searchParams.get(\"query\")}\"</h2>}\n      {errorServer && <h2>Server response error</h2>}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["Wrapper","styled","LinkMovie","Link","movies","location","useLocation","map","movie","to","id","state","from","title","name","fetchSearchMovies","query","options","method","headers","accept","Authorization","axios","response","useState","setQuery","foundMovies","setFoundMovies","statusPending","setStatusPending","useSearchParams","searchParams","setSearchParams","notFaund","setNotFound","errorServer","setErrorServer","useEffect","value","get","then","data","results","length","updateQueryString","onSubmit","e","preventDefault","trim","type","onChange","target"],"sourceRoot":""}