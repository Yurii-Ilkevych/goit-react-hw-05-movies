{"version":3,"file":"static/js/761.7367ae48.chunk.js","mappings":"wPAEMA,EAAY,mCAAG,WAAOC,GAAP,gFACXC,EAAU,CACZC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cAAe,+NALJ,kBAQMC,EAAAA,EAAAA,IAAA,6CAAgDN,EAAhD,2BAA6EC,GARnF,cAQXM,EARW,yBASVA,EAASC,KAAKC,SATJ,wHAAH,sDAgBlB,I,SChBMC,E,OAAYC,EAAAA,GAAH,yG,SCuEf,EApEgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0CH,EAAAA,EAAAA,WAAS,GAAnD,eAAOK,EAAP,KAAsBC,EAAtB,KACA,GAA4CN,EAAAA,EAAAA,WAAS,GAArD,eAAOO,EAAP,KAA0BC,EAA1B,KACA,GAAsCR,EAAAA,EAAAA,WAAS,GAA/C,eAAOS,EAAP,KAAuBC,EAAvB,MAGAC,EAAAA,EAAAA,YAAU,WAcZ,OAbIxB,EAAagB,GAASS,MAAK,SAAAf,GACtBA,GAA8B,IAAnBA,EAAQgB,QACpBX,EAAWL,GACXS,GAAiB,IACXT,GACNW,GAAe,GAGG,IAAnBX,EAAQgB,QACPH,GAAY,EAEjB,IAEI,WACHA,GAAY,GACZJ,GAAiB,GACjBJ,EAAW,MACXM,GAAe,EAClB,CAEA,GAAE,CAACL,IAEJ,IAAMW,EAAW,SAACC,GACd,IAAOC,EAAUD,EAAVC,OACP,OAAGA,GAEU,WAEhB,EACKC,EAAW,SAACF,GAClB,IAAOG,EAAWH,EAAXG,QAEP,OAAKA,GAEQ,YACZ,EAEC,OACE,+BACGb,IAAiB,SAACP,EAAD,UACfG,EAAQkB,KAAI,SAAAJ,GACZ,OAAO,2BACN,sCACU,0BAAOD,EAASC,SAE1B,uBAAIE,EAAWF,OAJAA,EAAO3B,GAMvB,MAEFmB,IAAqB,kDACrBE,IAAkB,uEAGxB,C","sources":["components/APi/fetchReviews.js","components/Reviews/Rewievs.styled.js","components/Reviews/Reviews.js"],"sourcesContent":["import axios from 'axios';\n\nconst fetchRewievs = async (id) => {\n    const options = {\n        method: 'GET',\n        headers: {\n          accept: 'application/json',\n          Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1YWI4YTU2N2U4NTIwYjJkOTYxNmQyYjU1NGY1MGI4MyIsInN1YiI6IjY0Nzg5MDY0MDc2Y2U4MDEwNzliOGMxNCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.2ia6cdeIOjpNaTQl8aCiS1rstAtEfICJgybU1GCz5mQ'\n        }};\ntry {\n    const response = await axios.get(`https://api.themoviedb.org/3/movie/${id}/reviews?language=en-US`, options)\n    return response.data.results\n} catch (error) {\n    return error\n}\n        \n}\n\nexport default fetchRewievs","import styled from '@emotion/styled'\n\nconst WrapperUl = styled.ul`\nlist-style: none;\npadding: 10px 0px 10px 0px;\nborder-bottom: 1px solid black;\n`\n\nexport {WrapperUl}","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport fetchRewievs from '../APi/fetchReviews';\nimport { WrapperUl } from './Rewievs.styled';\nimport PropTypes from 'prop-types';\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const { movieId } = useParams();\n  const [statusPending, setStatusPending] = useState(false);\n  const [statusErrorServer, setErrorServer] = useState(false);\n  const [statusNotFaund, setNotFound] = useState(false)\n\n\n  useEffect(() => {\n    fetchRewievs(movieId).then(results => {\n      if(results && results.length !== 0){\n        setReviews(results)\n        setStatusPending(true)\n    }else if(!results){\n        setErrorServer(true)\n    }\n\n    if(results.length === 0){\n        setNotFound(true)\n    }\n  })\n\nreturn ()=> {\n    setNotFound(false)\n    setStatusPending(false)\n    setReviews(null)\n    setErrorServer(false)\n}\n\n}, [movieId]);\n\nconst getAutor = (review)=> {\n    const {author} = review\n    if(author){\nreturn author\n    }else{return \"No author\"}\n\n}\nconst getReviews=(review)=> {\nconst {content} = review\n\nif ( content){\n    return content\n}else{return \"No content\"}\n}\n\n  return (\n    <section>\n      {statusPending && <WrapperUl>\n        {reviews.map(review => {\n         return <li key={review.id}>\n          <h3>\n            Author: <span>{getAutor(review)}</span>\n          </h3>\n          <p>{getReviews(review)}</p>\n        </li>\n        }) }\n      </WrapperUl>}\n      {statusErrorServer && <h2>Server response error</h2>}\n      {statusNotFaund && <h2>We don't have any reviews for this movie</h2>}\n    </section>\n  );\n};\n\nReviews.propTypes = {\n  movieId: PropTypes.string,\n};\n\nexport default Reviews;\n"],"names":["fetchRewievs","id","options","method","headers","accept","Authorization","axios","response","data","results","WrapperUl","styled","useState","reviews","setReviews","movieId","useParams","statusPending","setStatusPending","statusErrorServer","setErrorServer","statusNotFaund","setNotFound","useEffect","then","length","getAutor","review","author","getReviews","content","map"],"sourceRoot":""}