{"version":3,"file":"static/js/395.d9409d0c.chunk.js","mappings":"wPAEMA,EAAY,mCAAG,WAAMC,GAAN,gFACbC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NANa,kBAUIC,EAAAA,EAAAA,IAAA,6CACmBN,EADnB,2BAEnBC,GAZe,cAUXM,EAVW,yBAcVA,GAdU,wHAAH,sDAoBlB,I,SCpBMC,E,OAAYC,EAAAA,GAAH,yG,SCwFf,EApFa,WAEX,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0CH,EAAAA,EAAAA,WAAS,GAAnD,eAAOK,EAAP,KAAsBC,EAAtB,KACA,GAAkDN,EAAAA,EAAAA,WAAS,GAA3D,eAAOO,EAAP,KAA0BC,EAA1B,KACA,GAA4CR,EAAAA,EAAAA,WAAS,GAArD,eAAOS,EAAP,KAAuBC,EAAvB,MAEAC,EAAAA,EAAAA,YAAU,WACRtB,EAAac,GAASS,MAAK,SAAAf,GAczB,OAbIA,GACFK,EAAQL,EAAOgB,KAAKZ,MACpBK,GAAiB,IACPT,IACVK,EAAQ,MACRI,GAAiB,GACjBE,GAAqB,IAES,IAA5BX,EAAOgB,KAAKZ,KAAKa,SACnBZ,EAAQ,MACRI,GAAiB,GACjBI,GAAkB,IAEb,WACLJ,GAAiB,GACjBE,GAAqB,GACrBE,GAAkB,EACnB,CACF,GACF,GAAE,CAACP,IAEJ,IAAMY,EAAS,SAAAC,GACb,IAAQC,EAAiBD,EAAjBC,aACR,OAAIA,EACI,uCAAN,OAA8CA,G,oyDAIjD,EACKC,EAAU,SAAAF,GACd,IAAQG,EAAwBH,EAAxBG,cAAeC,EAASJ,EAATI,KACvB,OAAIA,IAEOD,GAGF,UAEV,EAQD,OACE,+BACGd,IACC,SAACP,EAAD,UACGG,EAAKoB,KAAI,SAAAL,GACR,OACE,2BACE,gBACEM,IAAKP,EAAOC,GACZO,IAAKL,EAAQF,GACbQ,MAAO,GACPC,OAAQ,OAEV,wBAAKP,EAAQF,MACb,wCACa,2BAtBNU,EAsB0BV,EAAMU,UArB/CA,GAGK,uBASUV,EAAMW,WAbN,IAAAD,CA0BZ,MAGJnB,IAAqB,kDACrBE,IAAkB,wDAGxB,C","sources":["api/fetchCredits.js","components/Cast/Cast.styled.js","components/Cast/Cast.js"],"sourcesContent":["import axios from 'axios';\n\nconst fetchCredits = async id => {\n  const options = {\n    method: 'GET',\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1YWI4YTU2N2U4NTIwYjJkOTYxNmQyYjU1NGY1MGI4MyIsInN1YiI6IjY0Nzg5MDY0MDc2Y2U4MDEwNzliOGMxNCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.2ia6cdeIOjpNaTQl8aCiS1rstAtEfICJgybU1GCz5mQ',\n    },\n  };\n  try {\n    const result = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}/credits?language=en-US`,\n      options\n    );\n    return result;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport default fetchCredits;\n","import styled from '@emotion/styled'\n\nconst WrapperUl = styled.ul`\nlist-style: none;\npadding: 10px 0px 10px 0px;\nborder-bottom: 1px solid black;\n`\n\nexport {WrapperUl}","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport fetchCredits from '../../api/fetchCredits';\nimport defaultActor from '../../img/no-profile-picture-icon.png';\nimport { WrapperUl } from './Cast.styled';\n\nconst Cast = () => {\n\n  const [cast, setCast] = useState(null);\n  const { movieId } = useParams();\n  const [statusPending, setStatusPending] = useState(false);\n  const [statusErrorServer, setStatusErrorServer] = useState(false);\n  const [statusNotFaund, setStatusNotFound] = useState(false);\n\n  useEffect(() => {\n    fetchCredits(movieId).then(result => {\n      if (result) {\n        setCast(result.data.cast);\n        setStatusPending(true);\n      } else if (!result) {\n        setCast(null);\n        setStatusPending(false);\n        setStatusErrorServer(true);\n      }\n      if (result.data.cast.length === 0) {\n        setCast(null);\n        setStatusPending(false);\n        setStatusNotFound(true);\n      }\n      return () => {\n        setStatusPending(false);\n        setStatusErrorServer(false);\n        setStatusNotFound(false);\n      };\n    });\n  }, [movieId]);\n\n  const getImg = actor => {\n    const { profile_path } = actor;\n    if (profile_path) {\n      return `https://image.tmdb.org/t/p/original/${profile_path}`;\n    } else {\n      return defaultActor;\n    }\n  };\n  const getName = actor => {\n    const { original_name, name } = actor;\n    if (name) {\n      return name;\n    } else if (original_name) {\n      return original_name;\n    } else {\n      return 'No name';\n    }\n  };\n  const getCharacter = character => {\n    if (character) {\n      return character;\n    } else {\n      return 'No character';\n    }\n  };\n  return (\n    <section>\n      {statusPending && (\n        <WrapperUl>\n          {cast.map(actor => {\n            return (\n              <li key={actor.credit_id}>\n                <img\n                  src={getImg(actor)}\n                  alt={getName(actor)}\n                  width={80}\n                  height={120}\n                ></img>\n                <h3>{getName(actor)}</h3>\n                <p>\n                  Character: <span>{getCharacter(actor.character)}</span>\n                </p>\n              </li>\n            );\n          })}\n        </WrapperUl>\n      )}\n      {statusErrorServer && <h2>Server response error</h2>}\n      {statusNotFaund && <h2>No cast information found</h2>}\n    </section>\n  );\n};\n\nexport default Cast;\n"],"names":["fetchCredits","id","options","method","headers","accept","Authorization","axios","result","WrapperUl","styled","useState","cast","setCast","movieId","useParams","statusPending","setStatusPending","statusErrorServer","setStatusErrorServer","statusNotFaund","setStatusNotFound","useEffect","then","data","length","getImg","actor","profile_path","getName","original_name","name","map","src","alt","width","height","character","credit_id"],"sourceRoot":""}